"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const exec_1 = require("../util/exec");
const arg_parse_1 = require("../util/arg-parse");
class AbstractNpmClient {
    constructor() {
        this.ignoreScriptsFlag = '--ignore-scripts';
    }
    buildPublishCmd(npmArgs) {
        return [this.baseCmd, 'publish', ...npmArgs];
    }
    queryConfigFlag(nameInput, args, rootDir) {
        return __awaiter(this, void 0, void 0, function* () {
            let varName = Array.isArray(nameInput) ? nameInput[0] : nameInput;
            let varVal = arg_parse_1.extractNamedFlag(args, nameInput);
            if (varVal !== null) {
                return varVal;
            }
            let raw = this.getEnvConfigVar(varName);
            if (raw != null) {
                return JSON.parse(raw);
            }
            return JSON.parse(yield this.queryUserConfigVar(varName, rootDir));
        });
    }
    queryConfigVal(nameInput, args, rootDir) {
        return __awaiter(this, void 0, void 0, function* () {
            let varName = Array.isArray(nameInput) ? nameInput[0] : nameInput;
            let varVal = arg_parse_1.extractNamedVal(args, nameInput);
            if (varVal !== null) {
                return varVal;
            }
            varVal = this.getEnvConfigVar(varName);
            if (varVal != null) {
                return varVal;
            }
            return yield this.queryUserConfigVar(varName, rootDir);
        });
    }
    getEnvConfigVar(varName) {
        let key = 'npm_config_' + varName.replace('-', '_');
        let val = process.env[key];
        return val === undefined ? null : val;
    }
    queryUserConfigVar(varName, rootDir) {
        return exec_1.execBuffered([this.baseCmd, 'config', 'get', varName], rootDir)
            .then((output) => output.trim());
    }
}
exports.default = AbstractNpmClient;
