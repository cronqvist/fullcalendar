"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const arg_parse_1 = require("../util/arg-parse");
const AbstractNpmClient_1 = require("./AbstractNpmClient");
class DefactoNpmClient extends AbstractNpmClient_1.default {
    constructor() {
        super(...arguments);
        this.baseCmd = 'npm';
    }
    buildInstallCmd(forceCi, npmArgs) {
        return [this.baseCmd, forceCi ? 'ci' : 'install'].concat(npmArgs);
    }
    buildAddCmd(pkgArgs, npmArgs) {
        return [this.baseCmd, 'install', ...pkgArgs, ...npmArgs];
    }
    buildRemoveCmd(pkgArgs, npmArgs) {
        return [this.baseCmd, 'install', ...pkgArgs, ...npmArgs];
    }
    buildExecCmd(cmdStr) {
        return ['npx', '-c', cmdStr];
    }
    queryAddConfig(args, rootDir) {
        return Promise.all([
            this.queryConfigFlag(['save', 'S'], args, rootDir),
            this.queryConfigFlag(['save-bundle', 'B'], args, rootDir),
            this.queryConfigFlag(['save-prod', 'P'], args, rootDir),
            this.queryConfigFlag(['save-dev', 'D'], args, rootDir),
            this.queryConfigFlag(['save-optional', 'O'], args, rootDir),
            this.queryConfigFlag(['save-exact', 'E'], args, rootDir),
            this.queryConfigVal('save-prefix', args, rootDir)
        ]).then(([doSave, doSaveBundle, doSaveProd, doSaveDev, doSaveOptional, doExact, prefix]) => {
            let depType = '';
            if (doSaveBundle) {
                throw new errors_1.UnsupportedDepTypeError('bundledDependencies');
            }
            else if (doSaveDev) {
                depType = 'devDependencies';
            }
            else if (doSaveOptional) {
                depType = 'optionalDependencies';
            }
            else if (doSaveProd || doSave) {
                depType = 'dependencies';
            }
            return { depType, versionPrefix: prefix, versionForceExact: doExact };
        });
    }
    queryVersionConfig(args, rootDir) {
        return Promise.all([
            this.queryConfigFlag('allow-same-version', args, rootDir),
            this.queryConfigVal('tag-version-prefix', args, rootDir),
            this.queryConfigFlag('git-tag-version', args, rootDir),
            this.queryConfigFlag('commit-hooks', args, rootDir),
            this.queryConfigFlag(['sign-git-tag', 's'], args, rootDir)
        ]).then(([allowSameVersion, tagVersionPrefix, gitTagVersion, commitHooks, signGitTag]) => {
            let message = arg_parse_1.extractNamedVal(args, ['message', 'm']) || '';
            let force = arg_parse_1.extractNamedFlag(args, ['force', 'f'], false);
            let versionIgnoreScripts = arg_parse_1.extractNamedFlag(args, 'ignore-scripts', false);
            let versionSpecifier = arg_parse_1.extractPositionalArg(args) || '';
            let versionExact = '';
            let versionReleaseType = '';
            if (versionSpecifier) {
                if (versionSpecifier === 'major' ||
                    versionSpecifier === 'minor' ||
                    versionSpecifier === 'patch' ||
                    versionSpecifier === 'prepatch' ||
                    versionSpecifier === 'prerelease') {
                    versionReleaseType = versionSpecifier;
                }
                else {
                    versionExact = versionSpecifier;
                }
            }
            let versionPreid = (versionReleaseType === 'prerelease' && arg_parse_1.extractNamedVal(args, 'preid')) || '';
            return {
                versionExact,
                versionReleaseType,
                versionPreid,
                versionAllowSame: allowSameVersion,
                versionIgnoreScripts,
                gitForce: force,
                gitMessage: message,
                gitTagEnabled: gitTagVersion,
                gitTagPrefix: tagVersionPrefix,
                gitTagSign: signGitTag,
                gitCommitHooks: commitHooks,
                gitCommitArgs: args
            };
        });
    }
    queryGitTagPrefix(rootDir) {
        return this.queryConfigVal('tag-version-prefix', [], rootDir);
    }
}
exports.default = DefactoNpmClient;
