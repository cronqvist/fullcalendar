#!/usr/bin/env node
"use strict";
/// <reference path='./type-hacks.d.ts' />
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const chalk_1 = require("chalk");
const log_1 = require("./util/log");
const arg_parse_1 = require("./util/arg-parse");
const cmds_1 = require("./cmds");
const errors_1 = require("./errors");
const help_1 = require("./help");
const MonoRepo_1 = require("./MonoRepo");
const filter_1 = require("./pkg/filter");
// Debugging
// ----------------------------------------------------------------------------------------------------
let debugVal = process.env.DEBUG; // TODO: use NODE_ENV?
if (debugVal) {
    require('source-map-support').install();
    if (debugVal === 'verbose') {
        log_1.enableLogging();
    }
}
// Process Misc
// ----------------------------------------------------------------------------------------------------
function handleError(error) {
    console.error();
    if (error instanceof errors_1.LibError) {
        console.error(chalk_1.default.red('FAILURE'), error.message);
        if (debugVal) {
            console.error();
            console.error(error);
        }
    }
    else {
        console.error(error); // output everything
    }
    console.error();
    process.exit(1);
}
process.on('uncaughtException', handleError);
// for some reason, we need to attach a handler in order for a SIGINT to kill child processes
process.on('SIGINT', () => { });
// Main Execution, Arg Processing
// ----------------------------------------------------------------------------------------------------
let cwd = process.cwd();
let args = process.argv.slice(2);
if (arg_parse_1.argsAreHelp(args)) {
    help_1.showHelp('main');
}
else if (arg_parse_1.argsAreVersion(args)) {
    let libVersion = require(path_1.join(__dirname, '../../package.json')).version;
    console.log(libVersion);
}
else {
    let pkgArgs = arg_parse_1.extractNamedVals(args, 'pkgs');
    let pkgFilterArgs = arg_parse_1.extractNamedVals(args, 'filter-pkgs');
    let pkgExcludeArgs = arg_parse_1.extractNamedVals(args, 'exclude-pkgs');
    MonoRepo_1.queryMonoRepoWithDir(cwd).then((monoRepo) => {
        let subjectPkgs = filter_1.filterPkgs(monoRepo.innerPkgs, pkgArgs, pkgFilterArgs, pkgExcludeArgs);
        return cmds_1.handleCmd(monoRepo, subjectPkgs, args, cwd, getCallerNpmCmd());
    }).then(() => {
        log_1.log('exited with no errors');
    }, handleError);
}
// NPM Utils
// ----------------------------------------------------------------------------------------------------
function getCallerNpmCmd() {
    let infoStr = process.env.npm_config_argv;
    if (infoStr) {
        let info = JSON.parse(infoStr);
        return info.original[0];
    }
    return '';
}
