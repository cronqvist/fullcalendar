"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const ProgressBar = require("progress");
const string_1 = require("./string");
function runPrettySerial(tasks) {
    let wrappers = tasks.map((task) => () => {
        console.log();
        console.log(chalk_1.default.magenta('+ ' + task.label));
        return task.func(true);
    });
    return wrappers.reduce((p, fn) => p.then(fn), Promise.resolve());
}
exports.runPrettySerial = runPrettySerial;
function runPrettyParallel(tasks) {
    if (!tasks.length) {
        return Promise.resolve();
    }
    let progressBar = new ProgressBar('[:bar]', { width: 50, total: tasks.length });
    let successes = [];
    let outputs = [];
    let firstError;
    function showOutput() {
        for (let i = 0; i < tasks.length; i++) {
            if (outputs[i]) {
                console.log();
                console.log(chalk_1.default.magenta('+ ' + tasks[i].label));
                console.log(string_1.indentLines(outputs[i].trimEnd(), chalk_1.default.magenta('| ')));
                if (!successes[i]) {
                    console.log(chalk_1.default.red('+ Failed'));
                }
            }
        }
    }
    return Promise.all(tasks.map((task, i) => __awaiter(this, void 0, void 0, function* () {
        return task.func(false).then((output) => {
            progressBar.tick();
            outputs[i] = output;
            successes[i] = true;
        }, (error) => {
            progressBar.tick();
            if (!firstError) {
                firstError = error;
            }
            outputs[i] = error.output || error.toString();
        });
    }))).then(() => {
        showOutput();
        if (firstError) {
            return Promise.reject(firstError);
        }
        else {
            return Promise.resolve();
        }
    });
}
exports.runPrettyParallel = runPrettyParallel;
