"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function extractNamedVal(args, nameInput) {
    let vals = extractNamedVals(args, nameInput, 1);
    return vals.length > 0 ? vals[0] : null;
}
exports.extractNamedVal = extractNamedVal;
function extractNamedVals(args, nameInput, maxValues) {
    let argHash = parseArgNameInput(nameInput);
    let values = [];
    let i = 0;
    while (i < args.length) {
        let valueParts = args[i].split('=');
        let argName = valueParts.shift(); // will remove name
        if (argHash[argName]) {
            args.splice(i, 1); // remove the flag
            if (valueParts.length) { // a ="" value specified?
                values.push(valueParts.join('='));
                if (maxValues && values.length >= maxValues) {
                    return values;
                }
            }
            else {
                // get the next consecutive non-flag args
                while (i < args.length) {
                    let nextArg = args[i];
                    if (!isFlag(nextArg)) {
                        values.push(nextArg);
                        args.splice(i, 1); // remove nextArg
                        if (maxValues && values.length >= maxValues) {
                            return values;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
        }
        else {
            i++;
        }
    }
    return values;
}
exports.extractNamedVals = extractNamedVals;
function extractNamedFlag(args, nameInput, defaultBool = null) {
    let argHash = parseArgNameInput(nameInput);
    let i = 0;
    while (i < args.length) {
        let matchingVal = argHash[args[i]];
        if (matchingVal != null) { // true/false
            args.splice(i, 1); // remove the flag
            if (matchingVal && args[i] === 'false') {
                args.splice(i, 1); // remove the false
                matchingVal = !matchingVal;
            }
            return matchingVal;
        }
        else {
            i++;
        }
    }
    return defaultBool;
}
exports.extractNamedFlag = extractNamedFlag;
function extractPositionalArgs(args) {
    for (let i = 0; i < args.length; i++) {
        if (!isFlag(args[i])) {
            let j;
            for (j = i + 1; j < args.length; j++) {
                if (isFlag(args[j])) {
                    break;
                }
            }
            return args.splice(i, j); // remove it and return it
        }
    }
    return [];
}
exports.extractPositionalArgs = extractPositionalArgs;
function extractPositionalArg(args) {
    for (let i = 0; i < args.length; i++) {
        if (!isFlag(args[i])) {
            return args.splice(i, 1)[0]; // remove it and return it
        }
    }
    return null;
}
exports.extractPositionalArg = extractPositionalArg;
function peakPositionalArg(args) {
    for (let i = 0; i < args.length; i++) {
        if (!isFlag(args[i])) {
            return args[i];
        }
    }
    return null;
}
exports.peakPositionalArg = peakPositionalArg;
function isFlag(s) {
    return s.charAt(0) === '-';
}
exports.isFlag = isFlag;
function argsAreHelp(args) {
    return args[0] === '-h' || args[0] === '--help';
}
exports.argsAreHelp = argsAreHelp;
function argsAreVersion(args) {
    return args[0] === '-v' || args[0] === '--version';
}
exports.argsAreVersion = argsAreVersion;
function parseArgNameInput(input) {
    let res = {};
    if (typeof input === 'string') {
        res['--' + input] = true;
        res['--no-' + input] = false;
    }
    else {
        res['--' + input[0]] = true;
        res['--no-' + input[0]] = false;
        if (input.length > 1) {
            res['-' + input[1]] = true;
        }
    }
    return res;
}
