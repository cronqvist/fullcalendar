"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pretty_task_1 = require("../util/pretty-task");
const symlink_1 = require("./symlink");
const dep_json_fs_1 = require("./dep-json-fs");
const install_utils_1 = require("./install-utils");
function installPkgsViaSymlink(pkgs, monoRepo, doRoot, forceCi, npmRunTimeArgs) {
    let tasks = pkgs.map((pkg) => ({
        label: pkg.readableId(),
        func() {
            return installPkgViaSymlink(pkg, monoRepo, forceCi, npmRunTimeArgs);
        }
    }));
    if (doRoot && monoRepo.rootPkg) {
        tasks.unshift({
            label: 'root',
            func() {
                return install_utils_1.runPkgInstall(monoRepo, monoRepo.rootPkg, forceCi, npmRunTimeArgs, true);
            }
        });
    }
    return pretty_task_1.runPrettyParallel(tasks);
}
exports.installPkgsViaSymlink = installPkgsViaSymlink;
/*
TODO: put in parody with `execNpmTask` ?
*/
function installPkgViaSymlink(pkg, monoRepo, forceCi, npmRunTimeArgs) {
    return __awaiter(this, void 0, void 0, function* () {
        let { innerPkgsByName } = monoRepo;
        // remove internal references temporarily because NPM will choke
        let undoJsonTransform = yield dep_json_fs_1.removeDepEntries(pkg, innerPkgsByName);
        return install_utils_1.runPkgInstall(monoRepo, pkg, forceCi, npmRunTimeArgs, false)
            .finally(undoJsonTransform)
            .then((installOutput) => __awaiter(this, void 0, void 0, function* () {
            // defacto-npm kills all linked packages after almost any action. restore
            yield symlink_1.writeNeededSymlinksForPkg(pkg, innerPkgsByName);
            return installOutput;
        }));
    });
}
