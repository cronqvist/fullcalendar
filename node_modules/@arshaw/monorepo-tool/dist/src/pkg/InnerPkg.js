"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const fs = require("fs");
const path_1 = require("path");
const errors_1 = require("../errors");
const Pkg_1 = require("./Pkg");
const readFile = util_1.promisify(fs.readFile);
/*
A package that lives within a monorepo that is NOT the root package
*/
class InnerPkg extends Pkg_1.default {
    constructor(config, baseDir) {
        super(path_1.join(baseDir, config.path), config.npmClientArgs);
        this.relDir = config.path;
        this.distDir = this.computeDistDir(config.distDir, baseDir);
        this.ignoreFiles = config.ignoreFiles;
        if (this.distDir) {
            this.ignoreFiles = this.ignoreFiles.concat([
                path_1.relative(this.dir, this.distDir)
            ]);
        }
    }
    readableId() {
        return this.jsonData.name || this.relDir;
    }
    computeDistDir(s, baseDir) {
        if (typeof s === 'function') {
            s = s(this.relDir, this.dir, baseDir);
        }
        if (typeof s === 'string' && s) {
            s = path_1.isAbsolute(s) ? s : path_1.join(this.dir, s);
            if (s !== this.dir) {
                return s;
            }
        }
        return '';
    }
    queryPublishJsonData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.distDir) {
                return this.jsonData;
            }
            let pubJsonPath = path_1.join(this.distDir, 'package.json');
            let pubJsonStr = yield readFile(pubJsonPath, { encoding: 'utf8' })
                .catch(() => {
                throw new errors_1.MissingDistJsonError(this.readableId());
            });
            return JSON.parse(pubJsonStr);
        });
    }
}
exports.default = InnerPkg;
