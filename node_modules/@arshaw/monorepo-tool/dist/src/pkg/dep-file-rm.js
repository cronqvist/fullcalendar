"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const path_1 = require("path");
const rimrafCb = require("rimraf");
const log_1 = require("../util/log");
const async_1 = require("../util/async");
const hash_1 = require("../util/hash");
const rimraf = util_1.promisify(rimrafCb);
/*
TODO: really slow. somehow call native `rm -rf` shell portably. shelljs?
*/
function removeAllPkgDepFiles(rootPkg, subjectPkgs) {
    return __awaiter(this, void 0, void 0, function* () {
        let pkgs = (rootPkg ? [rootPkg] : []).concat(subjectPkgs);
        return async_1.allSettledVoid(pkgs.map((pkg) => {
            return rimraf(path_1.join(pkg.dir, 'node_modules'));
        }));
    });
}
exports.removeAllPkgDepFiles = removeAllPkgDepFiles;
function removeExactPkgDepFiles(subjectPkg, innerPkgsByName) {
    return async_1.allSettledVoid(hash_1.mapHashToArray(innerPkgsByName, (pkg, pkgName) => {
        return removePkgDepFile(subjectPkg, pkgName);
    }));
}
exports.removeExactPkgDepFiles = removeExactPkgDepFiles;
function removePkgDepFile(subjectPkg, refPkgName) {
    return __awaiter(this, void 0, void 0, function* () {
        let refPath = path_1.join(subjectPkg.dir, 'node_modules', refPkgName);
        log_1.log('rimraf', refPath);
        yield rimraf(refPath);
    });
}
exports.removePkgDepFile = removePkgDepFile;
