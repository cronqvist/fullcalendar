"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GitRepo_1 = require("../git/GitRepo");
const semver = require("semver");
/*
Accepts something that identifies a version: a version number, a git tag of verion number, or a git commit hash.
Returns a git commit hash.
*/
function resolveVersionish(monoRepo, subjectPkgs, versionish) {
    return __awaiter(this, void 0, void 0, function* () {
        let commitHash = '';
        if (!versionish) {
            versionish = computeBaseVersion(monoRepo.rootPkg, subjectPkgs);
            if (!versionish) {
                return '';
            }
        }
        let tagPrefix = yield monoRepo.npmClient.queryGitTagPrefix(monoRepo.rootDir);
        let gitRepo = new GitRepo_1.default(monoRepo.rootDir);
        if (tagPrefix) {
            commitHash = yield gitRepo.getTagUnderlyingHash(tagPrefix + versionish);
        }
        if (!commitHash) {
            commitHash = yield gitRepo.getTagUnderlyingHash(versionish); // second call of getTagUnderlyingHash?
        }
        return commitHash;
    });
}
exports.resolveVersionish = resolveVersionish;
function computeBaseVersion(rootPkg, subjectPkgs) {
    if (rootPkg && rootPkg.jsonData.version) {
        return rootPkg.jsonData.version;
    }
    return computeHighestVersion(subjectPkgs);
}
exports.computeBaseVersion = computeBaseVersion;
function computeHighestVersion(pkgs) {
    let versions = [];
    for (let pkg of pkgs) {
        let version = pkg.jsonData.version;
        if (version) {
            versions.push(version);
        }
    }
    if (versions.length) {
        versions.sort(semver.rcompare);
        return versions[0];
    }
    return '';
}
