"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const child_process_1 = require("child_process");
const BIN_PATH = path_1.join(process.cwd(), 'dist/src/main.js');
function bin(args, cwd, displayOutput, logging, inspector) {
    let env = Object.assign({}, process.env, {
        DEBUG: logging ? 'verbose' : 'true'
    });
    if (typeof args === 'string') {
        return exec(`${BIN_PATH} ${args}`, cwd, env, displayOutput);
    }
    else {
        if (inspector) {
            return exec(['node', '--inspect-brk', BIN_PATH, ...args], cwd, env, displayOutput);
        }
        else {
            return exec([BIN_PATH, ...args], cwd, env, displayOutput);
        }
    }
}
exports.bin = bin;
function exec(args, cwd, env = {}, displayOutput) {
    try {
        let output;
        if (typeof args === 'string') {
            output = child_process_1.execSync(args, { encoding: 'utf8', cwd, env, stdio: ['inherit', 'pipe', 'pipe'] });
        }
        else {
            output = child_process_1.execFileSync(args[0], args.slice(1), { encoding: 'utf8', cwd, env, stdio: ['inherit', 'pipe', 'pipe'] });
        }
        if (displayOutput) {
            console.log(output);
        }
        return { success: true, output };
    }
    catch (error) {
        let outputs = [];
        if (error.stdout) {
            outputs.push(error.stdout);
        }
        if (error.stderr) {
            outputs.push(error.stderr);
        }
        let output = outputs.join('\n');
        if (displayOutput) {
            console.log(output);
        }
        return { success: false, output };
    }
}
exports.exec = exec;
