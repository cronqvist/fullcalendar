"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exec_1 = require("./exec");
const fs_1 = require("fs");
const path_1 = require("path");
function queryInstalled(dir) {
    let pkgJsonPaths = exec_1.exec('find . -type d -name "node_modules" -prune -o -type f -name "package.json" -print', dir)
        .output.trim().split('\n');
    let pathRes = {};
    for (let pkgJsonPathRel of pkgJsonPaths) {
        let pkgJsonPathAbs = path_1.join(dir, pkgJsonPathRel);
        let pkgPathAbs = path_1.dirname(pkgJsonPathAbs);
        let pkgJsonStr = fs_1.readFileSync(pkgJsonPathAbs, { encoding: 'utf8' });
        let pkgJsonData = JSON.parse(pkgJsonStr);
        let depMap = buildInstallableDepMap(pkgJsonData);
        let depRes = {};
        for (let depName in depMap) {
            let depPath = path_1.join(pkgPathAbs, 'node_modules', depName);
            let lstat = null;
            try {
                lstat = fs_1.lstatSync(depPath);
            }
            catch (error) { }
            if (lstat) {
                if (lstat.isSymbolicLink()) {
                    depRes[depName] = fs_1.readlinkSync(depPath, { encoding: 'utf8' })
                        .replace(/^\.\.[\/\\]/, ''); // remove leading ../ (want to be rel to pkg root)
                }
                else {
                    depRes[depName] = true;
                }
            }
        }
        let pkgPathShort = path_1.dirname(pkgJsonPathRel);
        pkgPathShort = pkgPathShort.replace(/^\.[\/\\]/, ''); // remove leading ./
        pkgPathShort = pkgPathShort || '.'; // root should still be .
        if (Object.keys(depRes).length) {
            pathRes[pkgPathShort] = depRes;
        }
    }
    return pathRes;
}
exports.queryInstalled = queryInstalled;
function buildInstallableDepMap(pkgJsonData) {
    return Object.assign({}, pkgJsonData.dependencies || {}, pkgJsonData.devDependencies || {}, pkgJsonData.optionalDependencies || {});
}
function queryInstalledVersion(dir, depName) {
    let depJsonPath = path_1.join(dir, 'node_modules', depName, 'package.json');
    try {
        let depJsonStr = fs_1.readFileSync(depJsonPath, { encoding: 'utf8' });
        let depJsonData = JSON.parse(depJsonStr);
        return depJsonData.version;
    }
    catch (error) {
        return false;
    }
}
exports.queryInstalledVersion = queryInstalledVersion;
