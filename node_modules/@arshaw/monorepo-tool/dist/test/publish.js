"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const proj_1 = require("./lib/proj");
const exec_1 = require("./lib/exec");
// TODO: when private and no name. should disregard, not fail
describe('publish', () => {
    it('can publish the most recent version to a registry', () => {
        let proj = proj_1.buildProj({
            'monorepo.json': { packages: ['packages/*'] },
            'package.json': { version: '1.0.1' },
            'packages/': {
                'core/': {
                    'package.json': { name: 'core', version: '1.0.1' },
                    'index.js': 'alert("hello")'
                },
                'plug/': {
                    'package.json': { name: 'plug', version: '1.0.0', dependencies: { core: '*' } },
                    'index.js': 'alert("hello")'
                }
            }
        });
        let { success, output } = exec_1.bin(['publish', '--yes', '--dry-run'], proj.path, false, true); // logging=true
        expect(success).toBe(true);
        let corePath = path_1.join(proj.path, 'packages/core');
        let plugPath = path_1.join(proj.path, 'packages/plug');
        expect(output).toContain(`PUBLISH CMD npm publish --dry-run in ${corePath}`);
        expect(output).not.toContain(`PUBLISH CMD npm publish --dry-run in ${plugPath}`);
    });
    it('can publish from dist directories', () => {
        let proj = proj_1.buildProj({
            'monorepo.json': {
                packages: ['packages/*'],
                distDir: 'dist'
            },
            'package.json': { version: '1.0.1' },
            'packages/': {
                'core/': {
                    'package.json': { name: 'core', version: '1.0.1' },
                    'index.js': 'alert("hello")'
                },
                'plug/': {
                    'package.json': { name: 'plug', version: '1.0.0', dependencies: { core: '*' } },
                    'index.js': 'alert("hello")'
                }
            }
        });
        for (let pkgName of ['core', 'plug']) {
            let normalDir = path_1.join(proj.path, 'packages', pkgName);
            let distDir = path_1.join(proj.path, 'packages', pkgName, 'dist');
            fs_1.mkdirSync(distDir);
            for (let fileName of ['package.json', 'index.js']) {
                fs_1.copyFileSync(path_1.join(normalDir, fileName), path_1.join(distDir, fileName));
            }
        }
        // do --dry-run so doesn't actually write anything
        // do logging=true and inspect the output instead
        let { success, output } = exec_1.bin(['publish', '--yes', '--dry-run'], proj.path, false, true);
        expect(success).toBe(true);
        let coreDistPath = path_1.join(proj.path, 'packages/core/dist');
        let plugDistPath = path_1.join(proj.path, 'packages/plug/dist');
        expect(output).toContain(`PUBLISH CMD npm publish --dry-run in ${coreDistPath}`);
        expect(output).not.toContain(`PUBLISH CMD npm publish --dry-run in ${plugDistPath}`);
    });
});
